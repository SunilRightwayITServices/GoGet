// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.au.rightway.weatherforecast.di.components;

import com.au.rightway.weatherforecast.di.modules.ActivityModules;
import com.au.rightway.weatherforecast.di.modules.ActivityModules_GetWeatherForecastPresenterFactory;
import com.au.rightway.weatherforecast.di.modules.ActivityModules_ProvideMainActivityPresenterFactory;
import com.au.rightway.weatherforecast.modules.forecast.WeatherForecastContract;
import com.au.rightway.weatherforecast.modules.forecast.WeatherForecastFragment;
import com.au.rightway.weatherforecast.modules.forecast.WeatherForecastFragment_MembersInjector;
import com.au.rightway.weatherforecast.modules.mainactivity.MainAcivityContract;
import com.au.rightway.weatherforecast.modules.mainactivity.MainActivity;
import com.au.rightway.weatherforecast.modules.mainactivity.MainActivity_MembersInjector;
import com.au.rightway.weatherforecast.networking.WeatherForecastApi;
import com.au.rightway.weatherforecast.utils.SchedulersProvider;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerActivityComponents implements ActivityComponents {
  private Provider<MainAcivityContract.Presenter> provideMainActivityPresenterProvider;

  private MembersInjector<MainActivity> mainActivityMembersInjector;

  private Provider<WeatherForecastApi> getWeatherforecastApiProvider;

  private Provider<SchedulersProvider> getSchedulersProvider;

  private Provider<WeatherForecastContract.Presenter> getWeatherForecastPresenterProvider;

  private MembersInjector<WeatherForecastFragment> weatherForecastFragmentMembersInjector;

  private DaggerActivityComponents(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideMainActivityPresenterProvider =
        DoubleCheck.provider(
            ActivityModules_ProvideMainActivityPresenterFactory.create(builder.activityModules));

    this.mainActivityMembersInjector =
        MainActivity_MembersInjector.create(provideMainActivityPresenterProvider);

    this.getWeatherforecastApiProvider =
        new com_au_rightway_weatherforecast_di_components_SupportComponents_getWeatherforecastApi(
            builder.supportComponents);

    this.getSchedulersProvider =
        new com_au_rightway_weatherforecast_di_components_SupportComponents_getSchedulersProvider(
            builder.supportComponents);

    this.getWeatherForecastPresenterProvider =
        DoubleCheck.provider(
            ActivityModules_GetWeatherForecastPresenterFactory.create(
                builder.activityModules, getWeatherforecastApiProvider, getSchedulersProvider));

    this.weatherForecastFragmentMembersInjector =
        WeatherForecastFragment_MembersInjector.create(getWeatherForecastPresenterProvider);
  }

  @Override
  public void inject(MainActivity activity) {
    mainActivityMembersInjector.injectMembers(activity);
  }

  @Override
  public void inject(WeatherForecastFragment fragment) {
    weatherForecastFragmentMembersInjector.injectMembers(fragment);
  }

  public static final class Builder {
    private ActivityModules activityModules;

    private SupportComponents supportComponents;

    private Builder() {}

    public ActivityComponents build() {
      if (activityModules == null) {
        this.activityModules = new ActivityModules();
      }
      if (supportComponents == null) {
        throw new IllegalStateException(
            SupportComponents.class.getCanonicalName() + " must be set");
      }
      return new DaggerActivityComponents(this);
    }

    public Builder activityModules(ActivityModules activityModules) {
      this.activityModules = Preconditions.checkNotNull(activityModules);
      return this;
    }

    public Builder supportComponents(SupportComponents supportComponents) {
      this.supportComponents = Preconditions.checkNotNull(supportComponents);
      return this;
    }
  }

  private static
  class com_au_rightway_weatherforecast_di_components_SupportComponents_getWeatherforecastApi
      implements Provider<WeatherForecastApi> {
    private final SupportComponents supportComponents;

    com_au_rightway_weatherforecast_di_components_SupportComponents_getWeatherforecastApi(
        SupportComponents supportComponents) {
      this.supportComponents = supportComponents;
    }

    @Override
    public WeatherForecastApi get() {
      return Preconditions.checkNotNull(
          supportComponents.getWeatherforecastApi(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static
  class com_au_rightway_weatherforecast_di_components_SupportComponents_getSchedulersProvider
      implements Provider<SchedulersProvider> {
    private final SupportComponents supportComponents;

    com_au_rightway_weatherforecast_di_components_SupportComponents_getSchedulersProvider(
        SupportComponents supportComponents) {
      this.supportComponents = supportComponents;
    }

    @Override
    public SchedulersProvider get() {
      return Preconditions.checkNotNull(
          supportComponents.getSchedulersProvider(),
          "Cannot return null from a non-@Nullable component method");
    }
  }
}
