// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.au.rightway.weatherforecast.di.modules;

import com.au.rightway.weatherforecast.modules.forecast.WeatherForecastContract;
import com.au.rightway.weatherforecast.networking.WeatherForecastApi;
import com.au.rightway.weatherforecast.utils.SchedulersProvider;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ActivityModules_GetWeatherForecastPresenterFactory
    implements Factory<WeatherForecastContract.Presenter> {
  private final ActivityModules module;

  private final Provider<WeatherForecastApi> weatherforecastApiProvider;

  private final Provider<SchedulersProvider> schedulersProvider;

  public ActivityModules_GetWeatherForecastPresenterFactory(
      ActivityModules module,
      Provider<WeatherForecastApi> weatherforecastApiProvider,
      Provider<SchedulersProvider> schedulersProvider) {
    assert module != null;
    this.module = module;
    assert weatherforecastApiProvider != null;
    this.weatherforecastApiProvider = weatherforecastApiProvider;
    assert schedulersProvider != null;
    this.schedulersProvider = schedulersProvider;
  }

  @Override
  public WeatherForecastContract.Presenter get() {
    return Preconditions.checkNotNull(
        module.getWeatherForecastPresenter(
            weatherforecastApiProvider.get(), schedulersProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<WeatherForecastContract.Presenter> create(
      ActivityModules module,
      Provider<WeatherForecastApi> weatherforecastApiProvider,
      Provider<SchedulersProvider> schedulersProvider) {
    return new ActivityModules_GetWeatherForecastPresenterFactory(
        module, weatherforecastApiProvider, schedulersProvider);
  }
}
