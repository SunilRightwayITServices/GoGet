// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.au.rightway.weatherforecast.di.modules;

import com.au.rightway.weatherforecast.networking.WeatherForecastApi;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class SupportModules_ProvideweatherforecastAPIFactory
    implements Factory<WeatherForecastApi> {
  private final SupportModules module;

  private final Provider<Retrofit> retrofitProvider;

  public SupportModules_ProvideweatherforecastAPIFactory(
      SupportModules module, Provider<Retrofit> retrofitProvider) {
    assert module != null;
    this.module = module;
    assert retrofitProvider != null;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public WeatherForecastApi get() {
    return Preconditions.checkNotNull(
        module.provideweatherforecastAPI(retrofitProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<WeatherForecastApi> create(
      SupportModules module, Provider<Retrofit> retrofitProvider) {
    return new SupportModules_ProvideweatherforecastAPIFactory(module, retrofitProvider);
  }
}
